program AnalisadorLexicoAFD;

uses sysutils;

type
  TokenType = (Identificador, Numero, PalavraChave, OP_EQ, OP_GE, OP_MUL, OP_NE, OP_LE, OP_DIV, OP_GT, OP_AD, OP_ASS, OP_LT, OP_MIN, SMB_OBC, SMB_COM, SMB_CBC, SMB_SEM, SMB_OPA, SMB_CPA, StringNaoFechada, CaracterDesconhecido);

  Token = record
    tipo: TokenType;
    valor: string;
    linha: integer;
    coluna: integer;
  end;

  Simbolo = record
    nome: string;
    tipo: TokenType;
  end;

const
  palavrasChave: array[1..10] of string = ('if', 'then', 'else', 'begin', 'end', 'program', 'var', 'integer', 'real', 'while');

var
  codigo: string;
  i, estado, linha, coluna: integer;
  c: char;
  tabelaSimbolos: array of Simbolo;
  arquivoLex: Text;
  tokenAtual: Token;

procedure InicializaTabelaSimbolos;
var
  j: integer;
begin
  SetLength(tabelaSimbolos, 10);
  for j := 1 to 10 do
  begin
    tabelaSimbolos[j-1].nome := palavrasChave[j];
    tabelaSimbolos[j-1].tipo := PalavraChave;
  end;
end;

function EhLetra(c: char): boolean;
begin
  EhLetra := (c >= 'a') and (c <= 'z') or (c >= 'A') and (c <= 'Z');
end;

function EhDigito(c: char): boolean;
begin
  EhDigito := (c >= '0') and (c <= '9');
end;

function IdentificaOperadorSimbolo(buffer: string): TokenType;
begin
  if buffer = '=' then IdentificaOperadorSimbolo := OP_EQ
  else if buffer = '>=' then IdentificaOperadorSimbolo := OP_GE
  else if buffer = '*' then IdentificaOperadorSimbolo := OP_MUL
  else if buffer = '<>' then IdentificaOperadorSimbolo := OP_NE
  else if buffer = '<=' then IdentificaOperadorSimbolo := OP_LE
  else if buffer = '/' then IdentificaOperadorSimbolo := OP_DIV
  else if buffer = '>' then IdentificaOperadorSimbolo := OP_GT
  else if buffer = '+' then IdentificaOperadorSimbolo := OP_AD
  else if buffer = ':=' then IdentificaOperadorSimbolo := OP_ASS
  else if buffer = '<' then IdentificaOperadorSimbolo := OP_LT
  else if buffer = '-' then IdentificaOperadorSimbolo := OP_MIN
  else if buffer = '{' then IdentificaOperadorSimbolo := SMB_OBC
  else if buffer = ',' then IdentificaOperadorSimbolo := SMB_COM
  else if buffer = '}' then IdentificaOperadorSimbolo := SMB_CBC
  else if buffer = ';' then IdentificaOperadorSimbolo := SMB_SEM
  else if buffer = '(' then IdentificaOperadorSimbolo := SMB_OPA
  else if buffer = ')' then IdentificaOperadorSimbolo := SMB_CPA
  else IdentificaOperadorSimbolo := CaracterDesconhecido;
end;

function BuscaNaTabelaSimbolos(nome: string): boolean;
var
  j: integer;
begin
  BuscaNaTabelaSimbolos := False;
  for j := 0 to High(tabelaSimbolos) do
  begin
    if tabelaSimbolos[j].nome = nome then
    begin
      BuscaNaTabelaSimbolos := True;
      Exit;
    end;
  end;
end;

procedure AdicionaNaTabelaSimbolos(nome: string; tipo: TokenType);
var
  novoSimbolo: Simbolo;
begin
  if not BuscaNaTabelaSimbolos(nome) then
  begin
    novoSimbolo.nome := nome;
    novoSimbolo.tipo := tipo;
    SetLength(tabelaSimbolos, Length(tabelaSimbolos) + 1);
    tabelaSimbolos[High(tabelaSimbolos)] := novoSimbolo;
  end;
end;

procedure SalvaTokenEmArquivo(token: Token);
begin
  WriteLn(arquivoLex, '<', token.tipo, ', ', token.valor, '> Linha: ', token.linha, ' Coluna: ', token.coluna);
end;

procedure GerarRelatorio;
var
  j: integer;
begin
  AssignFile(arquivoLex, 'tokens.lex');
  Rewrite(arquivoLex);
  for j := 0 to High(tabelaSimbolos) do
  begin
    SalvaTokenEmArquivo(Token(tipo: tabelaSimbolos[j].tipo, valor: tabelaSimbolos[j].nome, linha: 0, coluna: 0));
  end;
  CloseFile(arquivoLex);
end;

function ProximoToken: Token;
var
  buffer: string;
  stringAberta: boolean;
begin
  // Inicialização
  estado := 0;
  buffer := '';
  stringAberta := False;
  tokenAtual.linha := linha;
  tokenAtual.coluna := coluna;

  while i <= Length(codigo) do
  begin
    c := codigo[i];
    Inc(i);
    Inc(coluna);

    case estado of
      0: // Estado inicial
        begin
          if c in [' ', #9] then
            continue // Ignorar espaços e tabulações
          else if c = #10 then
          begin
            Inc(linha);
            coluna := 0;
          end
          else if EhLetra(c) then
          begin
            estado := 1; // Identificador/palavra-chave
            buffer := c;
          end
          else if EhDigito(c) then
          begin
            estado := 2; // Número
            buffer := c;
          end
          else if (c in ['=', '<', '>', '+', '-', '*', '/', '{', ',', '}', ';', '(', ')']) then
          begin
            estado := 3; // Operador/símbolo
            buffer := c;
          end
          else if c = '''' then
          begin
            estado := 4; // String
            buffer := c;
            stringAberta := True;
          end
          else
          begin
            estado := 5; // Caractere desconhecido
            buffer := c;
          end;
        end;

      1: // Identificador/palavra-chave
        begin
          if EhLetra(c) or EhDigito(c) then
          begin
            buffer := buffer + c;
          end
          else
          begin
            // Fim do identificador/palavra-chave
            buffer := LowerCase(buffer); // MicroPascal não é case-sensitive
            if BuscaNaTabelaSimbolos(buffer) then
            begin
              tokenAtual.tipo := PalavraChave;
            end
            else
            begin
              AdicionaNaTabelaSimbolos(buffer, Identificador);
              tokenAtual.tipo := Identificador;
            end;
            tokenAtual.valor := buffer;
            tokenAtual.coluna := coluna - Length(buffer);
            ProximoToken := tokenAtual;
            Exit;
          end;
        end;

      2: // Número
        begin
          if EhDigito(c) then
          begin
            buffer := buffer + c;
          end
          else
          begin
            // Fim do número
            tokenAtual.tipo := Numero;
            tokenAtual.valor := buffer;
            tokenAtual.coluna := coluna - Length(buffer);
            ProximoToken := tokenAtual;
            Exit;
          end;
        end;

      3: // Operador/símbolo
        begin
          // Verifica se é um operador composto
          if ((buffer = ':') and (c = '=')) or ((buffer = '<') and (c = '>')) or ((buffer = '<') and (c = '=')) or ((buffer = '>') and (c = '=')) then
          begin
            buffer := buffer + c;
            Inc(i);
            Inc(coluna);
          end;
          tokenAtual.tipo := IdentificaOperadorSimbolo(buffer);
          tokenAtual.valor := buffer;
          tokenAtual.coluna := coluna - Length(buffer);
          ProximoToken := tokenAtual;
          Exit;
        end;
