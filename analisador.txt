program AnalisadorLexicoAFD;

uses sysutils;

type
  TokenType = (Identificador, Numero, PalavraChave, OP_EQ, OP_GE, OP_MUL, OP_NE, OP_LE, OP_DIV, OP_GT, OP_AD, OP_ASS, OP_LT, OP_MIN, SMB_OBC, SMB_COM, SMB_CBC, SMB_SEM, SMB_OPA, SMB_CPA, StringNaoFechada, CaracterDesconhecido);

  Token = record
    tipo: TokenType;
    valor: string;
    linha, coluna: integer;
  end;

  Simbolo = record
    nome: string;
    tipo: TokenType;
  end;

const
  palavrasChave: array[1..10] of string = ('if', 'then', 'else', 'begin', 'end', 'program', 'var', 'integer', 'real', 'while');

var
  codigo: string;
  i, estado, linha, coluna: integer;
  c: char;
  tabelaSimbolos: array of Simbolo;
  arquivoLex: Text;
  tokenAtual: Token;

procedure InicializaTabelaSimbolos;
var j: integer;
begin
  SetLength(tabelaSimbolos, 10);
  for j := 1 to 10 do
    tabelaSimbolos[j-1].nome := palavrasChave[j];
    tabelaSimbolos[j-1].tipo := PalavraChave;
end;

function Letra(c: char): boolean;
begin
  Result := (c in ['a'..'z', 'A'..'Z']);
end;

function Digito(c: char): boolean;
begin
  Result := (c in ['0'..'9']);
end;

function IdentificaOperadorSimbolo(buffer: string): TokenType;
begin
  case buffer of
    '=': Result := OP_EQ;
    '>=': Result := OP_GE;
    '*': Result := OP_MUL;
    '<>': Result := OP_NE;
    '<=': Result := OP_LE;
    '/': Result := OP_DIV;
    '>': Result := OP_GT;
    '+': Result := OP_AD;
    ':=': Result := OP_ASS;
    '<': Result := OP_LT;
    '-': Result := OP_MIN;
    ',': Result := SMB_COM;
    ';': Result := SMB_SEM;
    '(': Result := SMB_OPA;
    ')': Result := SMB_CPA;
  else
    Result := CaracterDesconhecido;
  end;
end;

function BuscaNaTabelaSimbolos(nome: string): boolean;
var j: integer;
begin
  Result := False;
  for j := 0 to High(tabelaSimbolos) do
    if tabelaSimbolos[j].nome = nome then
      Exit(True);
end;

procedure AdicionaNaTabelaSimbolos(nome: string; tipo: TokenType);
begin
  if not BuscaNaTabelaSimbolos(nome) then
  begin
    SetLength(tabelaSimbolos, Length(tabelaSimbolos) + 1);
    tabelaSimbolos[High(tabelaSimbolos)] := Simbolo(nome, tipo);
  end;
end;

procedure SalvaTokenEmArquivo(token: Token);
begin
  WriteLn(arquivoLex, '<', token.tipo, ', ', token.valor, '> Linha: ', token.linha, ' Coluna: ', token.coluna);
end;

procedure ReportaErro(mensagem: string; linha, coluna: integer);
begin
  WriteLn('Erro: ', mensagem, ' na linha ', linha, ', coluna ', coluna);
end;

function ProximoToken: Token;
var buffer: string; stringAberta: boolean;
begin
  estado := 0; buffer := ''; stringAberta := False;
  tokenAtual.linha := linha; tokenAtual.coluna := coluna;

  while i <= Length(codigo) do
  begin
    c := codigo[i]; Inc(i); Inc(coluna);

    case estado of
      0:
        if c in [' ', #9] then continue
        else if c = #10 then begin Inc(linha); coluna := 0; end
        else if Letra(c) then begin estado := 1; buffer := c; end
        else if Digito(c) then begin estado := 2; buffer := c; end
        else if c in ['=', '<', '>', '+', '-', '*', '/', ',', ';', '(', ')'] then begin estado := 3; buffer := c; end
        else if c = '''' then begin estado := 4; buffer := c; stringAberta := True; end
        else begin estado := 5; buffer := c; end;

      1:
        if Letra(c) or Digito(c) then buffer := buffer + c
        else begin
          buffer := LowerCase(buffer);
          if BuscaNaTabelaSimbolos(buffer) then tokenAtual.tipo := PalavraChave
          else begin AdicionaNaTabelaSimbolos(buffer, Identificador); tokenAtual.tipo := Identificador; end;
          tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer);
          SalvaTokenEmArquivo(tokenAtual); Exit(tokenAtual);
        end;

      2:
        if Digito(c) then buffer := buffer + c
        else begin
          tokenAtual.tipo := Numero; tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer);
          SalvaTokenEmArquivo(tokenAtual); Exit(tokenAtual);
        end;

      3:
        if ((buffer = ':') and (c = '=')) or ((buffer = '<') and (c = '>')) or ((buffer = '<') and (c = '=')) or ((buffer = '>') and (c = '=')) then begin buffer := buffer + c; Inc(i); Inc(coluna); end;
        tokenAtual.tipo := IdentificaOperadorSimbolo(buffer); tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer);
        SalvaTokenEmArquivo(tokenAtual); Exit(tokenAtual);

      4:
        if c = '''' then begin tokenAtual.tipo := PalavraChave; tokenAtual.valor := buffer + c; tokenAtual.coluna := coluna - Length(buffer); SalvaTokenEmArquivo(tokenAtual); Exit(tokenAtual); end
        else if c = #10 then begin tokenAtual.tipo := StringNaoFechada; tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer); SalvaTokenEmArquivo(tokenAtual); ReportaErro('String não-fechada', linha, coluna - Length(buffer)); Exit(tokenAtual); end
        else buffer := buffer + c;

      5:
        tokenAtual.tipo := CaracterDesconhecido; tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer);
        SalvaTokenEmArquivo(tokenAtual); ReportaErro('Caractere desconhecido', linha, coluna - Length(buffer)); Exit(tokenAtual);
    end;
  end;

  if stringAberta then begin tokenAtual.tipo := StringNaoFechada; tokenAtual.valor := buffer; tokenAtual.coluna := coluna - Length(buffer); SalvaTokenEmArquivo(tokenAtual); ReportaErro('String não-fechada', linha, coluna - Length(buffer)); Exit(tokenAtual); end;
end;

begin
  InicializaTabelaSimbolos;
  AssignFile(arquivoLex, 'tokens.lex');
  Rewrite(arquivoLex);
  CloseFile(arquivoLex);
end.
